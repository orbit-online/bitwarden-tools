#!/usr/bin/env bash
# shellcheck source-path=..

# Exit codes
# 1: Internal error
# 2: Unlock failed
# 3: Item not found
# 4: Field not found

bitwarden_fields() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/common.sh"

  DOC="Output Bitwarden item fields as bash variables
Usage:
  bitwarden-fields [options] [-j|-E] ITEMNAME [FIELD...]

Options:
  -p --purpose PURPOSE  Specify why the master password is required.
                        The text will be appended to
                        'Enter your Bitwarden Master Password to ...'
                        [default: retrieve \"\$ITEMNAME\"]
  -m --mechanism=MECH   Use \"bw\" or \"cache\" to retrieve the item [default: both]
  --cache-for=SECONDS   Cache item with socket-credential-cache [default: 0]
  -j --json             Output as JSON instead of bash variables
  -E --export           Export bash variables (instead of local definitions)
  --prefix=PREFIX       Prefix variable names with supplied string
  -e                    Output exit codes as eval code (e.g. \"(exit 2)\")
  --debug               Turn on bash -x
Note:
  To retrieve attachments, prefix their name with \`attachment:\`
  For attachment IDs use \`attachmentid:\`
  To retrieve all fields, omit the FIELD argument entirely
"
# docopt parser below, refresh this parser with `docopt.sh bitwarden-fields`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.1'; source \
"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:1018};usage=${DOC:47:63}
digest=1697c;options=('-p --purpose 1' '-m --mechanism 1' ' --cache-for 1' ' -'\
'-prefix 1' '-e  0' ' --debug 0' '-j --json 0' '-E --export 0');node_0(){
value __purpose 0;};node_1(){ value __mechanism 1;};node_2(){ value \
__cache_for 2;};node_3(){ value __prefix 3;};node_4(){ switch _e 4;};node_5(){
switch __debug 5;};node_6(){ switch __json 6;};node_7(){ switch __export 7;}
node_8(){ value ITEMNAME a;};node_9(){ value FIELD a true;};node_10(){
optional 0 1 2 3 4 5;};node_11(){ optional 12;};node_12(){ choice 6 7;}
node_13(){ optional 14;};node_14(){ repeatable 9;};node_15(){ sequence 10 11 8 \
13;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf \
"%s\n" "${DOC:47:63}" >&2;exit 1;}';local varnames=(__purpose __mechanism \
__cache_for __prefix _e __debug __json __export ITEMNAME FIELD) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 15 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;if declare -p var_FIELD >/dev/null 2>&1; then eval $p'FIELD=("${var_FIELD'\
'[@]}")';else eval $p'FIELD=()';fi;eval $p'__purpose=${var___purpose:-'\
"'"'retrieve "$ITEMNAME"'"'"'};'$p'__mechanism=${var___mechanism:-both};'$p'__'\
'cache_for=${var___cache_for:-0};'$p'__prefix=${var___prefix:-};'$p'_e=${var__'\
'e:-false};'$p'__debug=${var___debug:-false};'$p'__json=${var___json:-false};'\
$p'__export=${var___export:-false};'$p'ITEMNAME=${var_ITEMNAME:-};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' bitwarden-fields`
  eval "$(docopt "$@")"

  checkdeps bw # Keep socket-credential-cachel optional, but let it fail when e.g. --cache-for is used
  # shellcheck disable=2154
  if ! contains_element "$__mechanism" bw cache both; then
    docopt_exit "--mechanism must be \"bw\", \"cache\", or \"both\". Got \"$__mechanism\"."
  fi

  # shellcheck disable=2154
  if $__debug; then
    set -x
  fi

  # shellcheck disable=2154
  if $_e; then
    exit_fatal() { local r=$1; shift; error "$@"; printf "(exit %d)" "$r"; return "$r"; }
  else
    exit_fatal() { fatal "$@"; }
  fi

  # shellcheck disable=2154
  if { [[ $__mechanism = cache ]] || [[ $__cache_for -gt 0 ]]; } && ! type socket-credential-cache >/dev/null 2>&1; then
    warning "socket-credential-cache is not installed, unable to get/set cache"
    __cache_for=0
  fi

  local data cache_name="Bitwarden $ITEMNAME" data_from_cache=true
  if [[ $__mechanism = bw ]] || ! data=$(socket-credential-cache get "$cache_name" 2>/dev/null); then
    [[ $__mechanism != cache ]] || exit_fatal 3 "Unable to retrieve '%s' from cache" "$ITEMNAME"
    # Check again, the cache retrieval is a race condition
    bw_acquire_lock "fields $ITEMNAME"
    if [[ $__mechanism = bw ]] || ! data=$(socket-credential-cache get "$cache_name" 2>/dev/null); then
      data_from_cache=false
      if [[ -z $BW_SESSION ]]; then
        if [[ $__purpose = "retrieve \"\$ITEMNAME\"" ]]; then
          __purpose="retrieve \"$ITEMNAME\""
        fi
        export BW_SESSION
        if ! BW_SESSION=$(bitwarden-unlock --purpose "$__purpose"); then
          exit_fatal 2 "Unlocking bitwarden failed when trying to get item '%s'" "$ITEMNAME"
        fi
        # shellcheck disable=2064
        trap "exec 9>&-; BW_SESSION=\"$BW_SESSION\" bw lock >/dev/null" EXIT
      fi
      local bw_result bw_result_num
      bw_result=$(bw --nointeraction --raw list items --search "$ITEMNAME" | jq --arg name "$ITEMNAME" '[.[] | select(.name==$name)]')
      if ! bw_result_num=$(jq -e 'length' <<<"$bw_result" 2>/dev/null); then
        exit_fatal 1 "Unable to parse result from bw for item '%s'" "$ITEMNAME"
      fi
      if (( bw_result_num == 0)); then
        exit_fatal 3 "The item '%s' could not be not found" "$ITEMNAME"
      fi
      if (( bw_result_num > 1)); then
        exit_fatal 3 "Got multiple (%d) results when searching for '%s'" "$bw_result_num" "$ITEMNAME"
      fi
      if ! data=$(jq -e '.[0]' <<<"$bw_result" 2>/dev/null); then
        exit_fatal 1 "Unable to parse bw result for item %s" "$ITEMNAME"
      fi
      local item_id
      item_id=$(jq -r '.id' <<<"$data")
      local attachment_id
      local attachment_path
      for attachment_id in $(jq -r '(.attachments // [])[].id' <<<"$data"); do
        attachment_path=$(mktemp)
        bw --nointeraction --quiet get attachment "$attachment_id" --itemid "$item_id" --output "$attachment_path"
        data=$(
          jq --arg id "$attachment_id" '.attachments[(.attachments | map(.id == $id) | index(true))].data = '"$(jq --slurp -R . "$attachment_path")" \
          <<<"$data"
          r=$?
          rm "$attachment_path"
          exit $r
        )
      done
      unset BW_SESSION
    fi
  fi
  # shellcheck disable=2154
  if $__json; then
    local json_out='{}'
  fi
  if [[ ${#FIELD[@]} -eq 0 ]]; then
    # No fields specified, output everything
    readarray -td $'\n' FIELD < <(
      jq -r '((.login // {}) | del(.[] | nulls) | keys[]), ((.attachments // [])[] | ("attachment:" + .fileName)), ((.fields // [])[] | .name)' <<<"$data"
    )
  fi
  local field_name
  for field_name in "${FIELD[@]}"; do
    local variable_name=$field_name
    # Command substitution removes all trailing newlines, so we append an ETX (end of text) char and then remove it afterwards
    if [[ $field_name = id ]]; then
      if ! value=$(jq -jrce '.id' <<<"$data" && printf '\3'); then
        exit_fatal 2 "Unable to retrieve the ID field of the item '%s'." "$ITEMNAME"
      fi
    elif [[ $field_name = username || $field_name = password || $field_name = totp || $field_name = uris || $field_name = passwordRevisionDate || $field_name = fido2Credentials ]]; then
      if ! value=$(jq -jrce --arg name "$field_name" '.login[$name]' <<<"$data" && printf '\3'); then
        exit_fatal 4 "The item '%s' does not have a field called '%s'." "$ITEMNAME" "$field_name"
      fi
    elif [[ $field_name = attachmentid:* ]]; then
      local attachment_id=${field_name/#attachmentid:/}
      variable_name=${variable_name/#attachmentid:/}
      if ! value=$(jq -jrce --arg id "$attachment_id" '.attachments[] | select(.id==$id).data' <<<"$data" && printf '\3'); then
        exit_fatal 4 "The item '%s' does not have an attachment with the ID %s." "$ITEMNAME" "$attachment_id"
      fi
    elif [[ $field_name = attachment:* ]]; then
      local attachment_name=${field_name/#attachment:/}
      variable_name=${variable_name/#attachment:/}
      if ! value=$(jq -jrce --arg name "$attachment_name" '.attachments[] | select(.fileName==$name).data' <<<"$data" && printf '\3'); then
        exit_fatal 4 "The item '%s' does not have an attachment called '%s'." "$ITEMNAME" "$attachment_name"
      fi
    else
      if ! value=$(jq -jrce --arg name "$field_name" '.fields[] | select(.name==$name).value' <<<"$data" && printf '\3'); then
        exit_fatal 4 "The field '%s' on the item '%s' is not set." "$field_name" "$ITEMNAME"
      fi
    fi
    # Remove the ETX char
    value=${value%$'\3'}
    # shellcheck disable=2154
    variable_name=$__prefix$variable_name
    if $__json; then
      json_out=$(jq --arg key "$variable_name" --arg value "$value" '.[$key]=$value' <<<"$json_out")
    else
      variable_name=${variable_name//[^A-Za-z0-9_]/_}
      variable_name=${variable_name/#[^A-Za-z_]/_}
      # shellcheck disable=SC2154
      if $__export; then
        printf -- 'declare -gx -- %s=%q\n' "$variable_name" "$value"
      else
        printf -- 'declare -- %s=%q\n' "$variable_name" "$value"
      fi
    fi
  done
  if $__json; then
    printf "%s\n" "$json_out"
  fi

  if ! $data_from_cache && [[ $__cache_for -gt 0 ]]; then
    [[ $__mechanism != bw ]] || socket-credential-cache clear "$cache_name" <<<"$data"
    socket-credential-cache --timeout="$__cache_for" set "$cache_name" <<<"$data"
  fi
}

bitwarden_fields "$@"
