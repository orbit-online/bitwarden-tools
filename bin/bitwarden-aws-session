#!/usr/bin/env bash
# shellcheck source-path=..

main() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/common.sh"

  DOC="Use AWS credentials from Bitwarden to create a time-limited AWS session
Usage:
  bitwarden-aws-session [options] ITEMNAME

Options:
  -e, --env=PREFIX     Output credentials as exported bash vars
                       prefixed with PREFIX [default: ]
  -j, --json           Output credentials as AWS CLI compatible JSON
  --cache-for=SECONDS  Dual purpose: Cache the AWS creds item, but also the
                       resulting session creds [default: 0]
  --duration=SECONDS   Specify the session expiry [default: 3600]
  --totp               Create an MFA authenticated session
                       Requires _AWS_ACCOUNT_ID & _AWS_MFA_NAME fields to be set
  --assume-role=ARN    Assume role ARN and output corresponding credentials.
                       Use \$_AWS_ROLE_SESSION_NAME to set the session name
                       (defaults to 'bitwarden-tools')

Notes:
  Configure in ~/.aws/config with:
  [profile user]
  credential_process = bitwarden-aws-session --cache-for=900 aws-api-user
"
# docopt parser below, refresh this parser with `docopt.sh bitwarden-aws-session`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2329
docopt() { local v='2.0.2'; source \
"$pkgroot/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:1003};usage=${DOC:72:49}
digest=df4f9;options=('-e --env 1' '-j --json 0' ' --cache-for 1' ' --duration'\
' 1' ' --totp 0' ' --assume-role 1');node_0(){ value __env 0;};node_1(){
switch __json 1;};node_2(){ value __cache_for 2;};node_3(){ value __duration 3;}
node_4(){ switch __totp 4;};node_5(){ value __assume_role 5;};node_6(){ value \
ITEMNAME a;};node_7(){ optional 0 1 2 3 4 5;};node_8(){ sequence 7 6;};cat \
<<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:72:49}" >&2;exit 1;}';local varnames=(__env __json __cache_for \
__duration __totp __assume_role ITEMNAME) varname;for varname in \
"${varnames[@]}"; do unset "var_$varname";done;parse 8 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__env=${var___env:-};'$p'__json=${var___json:-false};'$p'__cache_'\
'for=${var___cache_for:-0};'$p'__duration=${var___duration:-3600};'$p'__totp=$'\
'{var___totp:-false};'$p'__assume_role=${var___assume_role:-};'$p'ITEMNAME=${v'\
'ar_ITEMNAME:-};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2
for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare \
-p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib-v$v/docopt-lib.sh"' bitwarden-aws-session`
  eval "$(docopt "$@")"
  if [[ $FILE != /* && $FILE != ~* ]]; then
    FILE=$HOME/$FILE
  fi
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  local \
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    session_name creds session_creds cache_key session_data valid_until
  session_name=${_AWS_ROLE_SESSION_NAME:-bitwarden-tools}
  # shellcheck disable=SC2154
  creds=$(bitwarden-fields --json --cache-for="$__cache_for" "$ITEMNAME")
  AWS_ACCESS_KEY_ID=$(jq -re '.AWS_ACCESS_KEY_ID // empty' <<<"$creds") || \
    fatal 'The item "%s" has no "AWS_ACCESS_KEY_ID" field set' "$ITEMNAME"
  AWS_SECRET_ACCESS_KEY=$(jq -re '.AWS_SECRET_ACCESS_KEY // empty' <<<"$creds") || \
    fatal 'The item "%s" has no "AWS_SECRET_ACCESS_KEY" field set' "$ITEMNAME"

  local cache_key
  # shellcheck disable=SC2154
  if $__totp; then cache_key="AWS-${AWS_ACCESS_KEY_ID}-totp-${session_name}-${__assume_role:-no-role}"
  else             cache_key="AWS-${AWS_ACCESS_KEY_ID}--${session_name}-${__assume_role:-no-role}"; fi

  if session_data=$(socket-credential-cache get "$cache_key" 2>/dev/null); then
    valid_until=$(jq -r .validUntil <<<"$session_data")
    if (( valid_until < $(date +%s) )); then
      session_data=
      socket-credential-cache clear "$cache_key"
    fi
  fi
  if [[ -z $session_data ]]; then
    # shellcheck disable=SC2154
    valid_until=$(($(date +%s) + __duration))
    if $__totp; then
      local aws_account_id aws_mfa_name
      aws_account_id=$(jq -re '._AWS_ACCOUNT_ID // empty' <<<"$creds") || \
        fatal 'The item "%s" has no "_AWS_ACCOUNT_ID" field set (required for --totp)' "$ITEMNAME"
      aws_mfa_name=$(jq -re '._AWS_MFA_NAME // empty' <<<"$creds") || \
        fatal 'The item "%s" has no "_AWS_MFA_NAME" field set (required for --totp)' "$ITEMNAME"
      local \
        totp_arn=arn:aws:iam::${aws_account_id}:mfa/${aws_mfa_name} \
        desc="Enter the AWS TOTP code for the MFA device named '${aws_mfa_name}'" \
        tries=0 errarg=() totp_code
      while true; do
        if ((tries >= 3)); then
          fatal "AWS STS session creation failed"
        elif totp_code=$("$pkgroot/.upkg/.bin/pinentry-wrapper" --desc "$desc" --ok Authenticate --cancel Abort "${errarg[@]}" 'AWS TOTP code'); then
          if [[ ! $totp_code =~ ^[0-9]{6}$ ]]; then
            # Protect against sending any passwords over the internet (in case the user thought it was e.g. a bitwarden pw prompt)
            errarg=(--error 'Not a 6 digit TOTP code')
          else
            if session_creds=$(export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY;
              aws sts get-session-token --duration-seconds "$__duration" --serial-number "$totp_arn" --token-code "$totp_code"); then
              break
            else
              errarg=(--error 'Invalid code')
            fi
          fi
        elif [[ $? -eq 2 ]]; then
          # Cancelled
          return 2
        else
          fatal "An unknown error occurred"
        fi
        ((tries++)) || true
      done
    else
      # shellcheck disable=SC2163
      session_creds=$(export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY; aws sts get-session-token --duration-seconds "$__duration")
    fi
    AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId <<<"$session_creds")
    AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey <<<"$session_creds")
    AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken <<<"$session_creds")
    if [[ -n $__assume_role ]]; then
      session_creds=$(export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN;
        aws sts assume-role \
        --duration-seconds "$__duration" \
        --role-arn "$__assume_role" \
        --role-session-name "$session_name"
      )
      AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId <<<"$session_creds")
      AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey <<<"$session_creds")
      AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken <<<"$session_creds")
    fi
    session_data=$(jq -n \
        --arg AWS_ACCESS_KEY_ID "$AWS_ACCESS_KEY_ID" \
        --arg AWS_SECRET_ACCESS_KEY "$AWS_SECRET_ACCESS_KEY" \
        --arg AWS_SESSION_TOKEN "$AWS_SESSION_TOKEN" \
        --argjson validUntil "$valid_until" '{
          "AWS_ACCESS_KEY_ID": $AWS_ACCESS_KEY_ID,
          "AWS_SECRET_ACCESS_KEY": $AWS_SECRET_ACCESS_KEY,
          "AWS_SESSION_TOKEN": $AWS_SESSION_TOKEN,
          "validUntil": $validUntil
        }'
    )
    if (( __cache_for > 0 )); then
      local cache_timeout=$__cache_for
      (( cache_timeout < __duration )) || cache_timeout=$__duration
      socket-credential-cache --timeout="$cache_timeout" set "$cache_key" <<<"$session_data"
    fi
  fi

  # shellcheck disable=2154
  if $__json; then
    jq '{
      "Version": 1,
      "AccessKeyId": .AWS_ACCESS_KEY_ID,
      "SecretAccessKey": .AWS_SECRET_ACCESS_KEY,
      "SessionToken": .AWS_SESSION_TOKEN
    }' <<<"$session_data"
  else
    jq -r --arg env "$__env" '
      "export " +
      "\($env)AWS_ACCESS_KEY_ID=\(.AWS_ACCESS_KEY_ID | @sh) " +
      "\($env)AWS_SECRET_ACCESS_KEY=\(.AWS_SECRET_ACCESS_KEY | @sh) " +
      "\($env)AWS_SESSION_TOKEN=\(.AWS_SESSION_TOKEN | @sh)"
    ' <<<"$session_data"
  fi
}

main "$@"
