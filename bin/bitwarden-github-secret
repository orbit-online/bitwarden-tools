#!/usr/bin/env bash
# shellcheck source-path=..

main() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/common.sh"
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")

  # shellcheck disable=SC2016
  DOC='Retrieve a bitwarden secret and encrypt it as a GitHub encrypted secret
GitHub CLI must be available on the system (https://github.com/cli/cli)
Usage:
  bitwarden-github-secret [options] [(-i I -f F) -o ORG...] ITEMNAME FIELD

Options:
  -p --purpose PURPOSE    Specify why the master password is required.
                          The text will be appended to
                          "Enter your Bitwarden Master Password to ..."
                          [default: retrieve "$ITEMNAME"]
  -m --mechanism=MECH     Use \"bw\" or \"cache\" to retrieve the item
                          [default: both]
  --cache-for=SECONDS     Cache item with socket-credential-cache [default: 0]
  -P --no-plaintext       Do not output the plaintext value
  -i --token-item ITEM    BW itemname of the GitHub token to use
  -f --token-field FIELD  BW fieldname of the GitHub token to use
  -o --org ORG            The organization to encrypt the secret for, if not
                          specified the encrypted secret will accessible in the
                          "encrypted" field on the JSON output

Example:
bitwarden-github-secret -t "GitHub API - Terraform" -f "GITHUB_TOKEN" -o myorg -o my-other-org "AWS - CI" "AWS_SECRET_ACCESS_KEY"

Output:
{
  "plaintext": "The plaintext value of ITEM.FIELD",
  "myorg": "VEZPcWZZcEYzWmw0cG5OT0ozeU5Sa2ZNcDhjVW1IN2cK"
  "my-other-org": "dWNHOVpRbUMyMVFLTVNUM05wOWxwWDk2TDZ1bEdqdFgK"
}
'
# docopt parser below, refresh this parser with `docopt.sh bitwarden-github-secret`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:1422};usage=${DOC:144:81};digest=7c420;options=('-p --purp'\
'ose 1' '-m --mechanism 1' ' --cache-for 1' '-P --no-plaintext 0' '-i --token-'\
'item 1' '-f --token-field 1' '-o --org 1');node_0(){ value __purpose 0;}
node_1(){ value __mechanism 1;};node_2(){ value __cache_for 2;};node_3(){
switch __no_plaintext 3;};node_4(){ value __token_item 4;};node_5(){ value \
__token_field 5;};node_6(){ value __org 6 true;};node_7(){ value ITEMNAME a;}
node_8(){ value FIELD a;};node_9(){ optional 0 1 2 3;};node_10(){ optional 11 12
};node_11(){ sequence 4 5;};node_12(){ repeatable 6;};node_13(){ sequence 9 10 \
7 8;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf \
"%s\n" "${DOC:144:81}" >&2;exit 1;}';local varnames=(__purpose __mechanism \
__cache_for __no_plaintext __token_item __token_field __org ITEMNAME FIELD) \
varname;for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 13 \
"$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;if declare -p var___org >/dev/null 2>&1; then eval $p'__org='\
'("${var___org[@]}")';else eval $p'__org=()';fi;eval $p'__purpose=${var___purp'\
'ose:-'"'"'retrieve "$ITEMNAME"'"'"'};'$p'__mechanism=${var___mechanism:-both}'\
';'$p'__cache_for=${var___cache_for:-0};'$p'__no_plaintext=${var___no_plaintex'\
't:-false};'$p'__token_item=${var___token_item:-};'$p'__token_field=${var___to'\
'ken_field:-};'$p'ITEMNAME=${var_ITEMNAME:-};'$p'FIELD=${var_FIELD:-};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' bitwarden-github-secret`
  eval "$(docopt "$@")"

  checkdeps gh

  if [[ -n $__token_item ]]; then
    export GITHUB_TOKEN
    # shellcheck disable=SC2086,SC2154
    GITHUB_TOKEN=$("$pkgroot/bin/bitwarden-value" --mechanism="$__mechanism" --cache-for="$__cache_for" "$__token_item" "$__token_field")
  fi

  local plaintext out={}
  plaintext=$("$pkgroot/bin/bitwarden-value" --mechanism="$__mechanism" --cache-for="$__cache_for" "$ITEMNAME" "$FIELD")
  # shellcheck disable=SC2154
  if ! $__no_plaintext; then
    # shellcheck disable=SC2086
    out=$(jq --arg plaintext "$plaintext" '.plaintext=$plaintext' <<<"$out")
  fi
  local encrypted
  # shellcheck disable=SC2154
  if [[ ${#__org[@]} -gt 0 ]]; then
    local org
    # shellcheck disable=SC2154
    for org in "${__org[@]}"; do
      encrypted=$(printf "%s" "$plaintext" | gh secret set --org "$org" --no-store)
      out=$(jq --arg org "$org" --arg encrypted "$encrypted" '.[$org]=$encrypted' <<<"$out")
    done
  else
    encrypted=$(printf "%s" "$plaintext" | gh secret set --org "$org" --no-store)
    out=$(jq --arg encrypted "$encrypted" '.encrypted=$encrypted' <<<"$out")
  fi
  printf "%s\n" "$out"
}

main "$@"
