#!/usr/bin/env bash
# shellcheck source-path=..

bitwarden_unlock() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/.upkg/records.sh/records.sh"
  source "$pkgroot/common.sh"
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")

  DOC="Unlock Bitwarden, uses pinentry from GnuPG to prompt for the master password
Usage:
  bitwarden-unlock [options]
Options:
  -p --purpose PURPOSE  Specify why the master password is required.
                        The text will be appended to
                        'Enter your Bitwarden Master Password to ...'
  --debug               Turn on bash -x
"
# docopt parser below, refresh this parser with `docopt.sh bitwarden-unlock`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:353};usage=${DOC:77:35};digest=4c641;options=('-p --purpos'\
'e 1' ' --debug 0');node_0(){ value __purpose 0;};node_1(){ switch __debug 1;}
node_2(){ optional 0 1;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" \
"$1" >&2;printf "%s\n" "${DOC:77:35}" >&2;exit 1;}';local varnames=(__purpose \
__debug) varname;for varname in "${varnames[@]}"; do unset "var_$varname";done
parse 2 "$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do
unset "$p$varname";done;eval $p'__purpose=${var___purpose:-};'$p'__debug=${var'\
'___debug:-false};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2
for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare \
-p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' bitwarden-unlock`
  eval "$(docopt "$@")"

  # shellcheck disable=2154
  if $__debug; then
    set -x
  fi

  checkdeps bw
  bw_acquire_lock "unlock"
  local desc="Enter your Bitwarden Master Password"
  # shellcheck disable=2154
  if [[ -n $__purpose ]]; then
    desc="$desc to $__purpose"
  fi
  local tries=0 errarg=() pass session_key
  while true; do
    # shellcheck disable=2068
    if ((tries >= 3)); then
      fatal "Unlocking Bitwarden failed"
    elif pass=$(pinentry-wrapper --desc "$desc" --ok Unlock --cancel Abort "${errarg[@]}" 'Unlock Bitwarden'); then
      if session_key=$(bw unlock --raw <<<"$pass"); then
        printf "%s\n" "$session_key"
        return 0
      else
        errarg=(--error 'Invalid password')
      fi
    elif [[ $? -eq 2 ]]; then
      # Cancelled
      return 2
    else
      fatal "An unknown error occurred"
    fi
    ((tries++)) || true
  done
}

bitwarden_unlock "$@"
